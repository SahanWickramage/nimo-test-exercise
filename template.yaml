AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  nimo-test-exercise

  Nimo Test Exercise contains two serverless microservices to query cryptocurrency prices and query search history!
  
Globals:
  Function:
    Timeout: 3

Resources:
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: user-pool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      MfaConfiguration: 'OFF'
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
        - AttributeDataType: String
          Name: name
          Required: true
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: nimo-test-exercise
      UserPoolId: !Ref CognitoUserPool

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: nimo-test-exercise-app-client
      UserPoolId: !Ref CognitoUserPool
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      AllowedOAuthFlows:
        - client_credentials
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - 'prices/read'
        - 'history/read'

  CryptocurrencyPriceResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: prices
      Name: cryptocurrency-price-resource-server
      UserPoolId: !Ref CognitoUserPool
      Scopes:
        - ScopeName: 'read'
          ScopeDescription: for cryptocurrency price GET endpoint

  SearchHistoryResourceServer:
    Type: AWS::Cognito::UserPoolResourceServer
    Properties:
      Identifier: history
      Name: search-history-resource-server
      UserPoolId: !Ref CognitoUserPool
      Scopes:
        - ScopeName: 'read' 
          ScopeDescription: for search history GET endpoint

  CommonApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Auth:
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            IdentitySource: method.request.header.Authorization
  
  CryptocurrencyPriceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cryptocurrency-price-service/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt CryptocurrencyPriceRole.Arn
      Environment:
        Variables:
          COINGECKO_URL: coingecko_url
          COINGECKO_API_KEY: coingecko_api_key
          DYNAMODB_TABLE: dynamodb_table
          SOURCE_EMAIL: source_email
      Events:
        CryptocurrencyPriceFunctionEvent:
          Type: Api
          Properties:
            Path: /prices
            Method: get
            RestApiId: !Ref CommonApiGateway
            Auth:
              Authorizer: MyCognitoAuthorizer
              AuthorizationScopes:
                - 'prices/read'
            Stage: dev

  SearchHistoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: search-history-service/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Role: !GetAtt SearchHistoryRole.Arn
      Environment:
        Variables:
          LAMBDA_FUNCTION_NAME: lambda_function_name
      Events:
        SearchHistoryFunctionEvent:
          Type: Api
          Properties:
            Path: /history
            Method: get
            RestApiId: !Ref CommonApiGateway
            Auth:
              Authorizer: MyCognitoAuthorizer
              AuthorizationScopes:
                - 'history/read'
            Stage: dev

  SearchHistoryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaInvocationPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt CryptocurrencyPriceFunction.Arn

  CryptocurrencyPriceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaDynamoDBExecutionRole
      Policies:
        - PolicyName: DynamoDBScanPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt CryptocurrencyPriceTable.Arn
        - PolicyName: SESEmailPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ses:SendEmail"
                  - "ses:SendRawEmail"
                Resource: 
                  - "arn:aws:ses:ap-southeast-2:211125780252:identity/*"

  CryptocurrencyPriceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: nimo-exercise-cryptocurrency-prices

Outputs:
  CommonApiGateway:
    Description: "Common API Gateway for both lambda functions for dev stage"
    Value: !Sub "https://${CommonApiGateway}.execute-api.${AWS::Region}.amazonaws.com/dev/**"
  CryptocurrencyPriceFunction:
    Description: "Cryptocurrency price function ARN"
    Value: !GetAtt CryptocurrencyPriceFunction.Arn
  # CryptocurrencyPriceFunctionIamRole:
  #   Description: "Implicit IAM Role created for cryptocurrency price function"
  #   Value: !GetAtt CryptocurrencyPriceFunctionRole.Arn
